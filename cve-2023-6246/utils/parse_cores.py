import os
import subprocess
import re

CORE_DUMP_DIR = "/home/test/fuzz/cores_3"
BINARY_PATH = "/usr/bin/su"
OUTPUT_DIR = "/home/test/fuzz/outputs"
BATCH_MAX = 10000

def get_core_files(directory):
    core_files = []
    for root, _, files in os.walk(directory):
        for file in files:
            if file.startswith("core"):
                core_files.append(os.path.join(root, file))
    return core_files

def save_output(output):
    filename=f"batch_{BATCH_START}"
    
    
def extract_backtrace(core_file, binary_path=None):
    print(f"\n=== Backtrace for: {core_file} ===")
    cmd = ["gdb", "--batch", "-ex", "bt"]
    
    if binary_path:
        cmd.extend(["-c", core_file, binary_path])
    try:
        output = subprocess.check_output(cmd, stderr=subprocess.STDOUT, text=True)
        return output+"\n"
    except subprocess.CalledProcessError as e:
        print(f"Error processing {core_file}:{e}")
        return e.output

def main():
    core_files = get_core_files(CORE_DUMP_DIR)
    batch_index = 1
    core_count = 1
    if not core_files:
        print("No core files found.")
        return
    
    filename = os.path.join(OUTPUT_DIR,f"core_{batch_index}.txt")
    f = open(filename,"w")
    for core_file in core_files:
        result = f"\n=== Backtrace for: {core_file} ==="
        result += extract_backtrace(core_file, binary_path=BINARY_PATH)
        if core_count >= BATCH_MAX:
             core_count = 1
             batch_index = batch_index + 1
             f.close()
             filename = os.path.join(OUTPUT_DIR,f"core_{batch_index}.txt")
             f = open(filename,"w")
        else:
             core_count += 1
        f.write(result)

    if not f.closed:
        f.close()

if __name__ == "__main__":
    main()

